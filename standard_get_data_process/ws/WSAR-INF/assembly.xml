<?xml version="1.0" encoding="UTF-8"?>
<beans
     xmlns="http://www.springframework.org/schema/beans"
     xmlns:beans="http://www.springframework.org/schema/beans"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:cc="http://www.capeclear.com/assembly/10"
     xmlns:cloud="urn:com.workday/esb/cloud/10.0"
     xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:pi="urn:com.workday/picof"
     xmlns:wd="urn:com.workday/bsvc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
    <cc:assembly id="WorkdayAssembly" version="2020.36">
        <cc:local-out id="call_get_response_endpoint" store-message="none" endpoint="vm://@{props['web.service.get.response.endpoint']}">
            <cc:set name="page.current" value="props['is.paged.get.current.page']"/>
            <cc:set name="page.total" value="props['is.paged.get.total.pages']"/>
            <cc:set name="record.count.total" value="props['is.paged.get.total.results']"/>
        </cc:local-out>
        <cc:local-out id="call_conform_get_data" execute-when="props['web.service.get.conform.xml'] == 'true'" routes-response-to="call_get_response_endpoint" endpoint="vm://@{props['web.service.get.conform.xml.endpoint']}"><cc:set name="web.service.get.conform.xml.filename" value="props['web.service.get.conform.xml.filename']"/></cc:local-out>
        <cc:local-out id="call_store_msg_return_msg_rsp" execute-when="props['web.service.response.log'] == true" routes-response-to="call_get_lookup_data_get" endpoint="vm://standard_logging/store_msg_return_msg">
            <cc:set name="store.filename" value="props['running.process'].toLowerCase().replace(' ','_') + '_webservice_get_response_full.xml'"/>
        </cc:local-out>
        <cc:local-in id="determine_endpoint" routes-to="call_store_msg_return_msg_rsp" access="public" icon="local-in-determine_endpoint.png"/>
        <cc:async-mediation id="copy_to_variable">
            <cc:steps>
                <cc:copy id="cp_to_lkp_var" output="variable" output-variable="lookup.wd.data.xml"/>
                <cc:copy id="reset_msg" input="variable" input-variable="msg.bckp"/>
                <cc:eval id="clr-msg-bckp">
                    <cc:expression>vars['msg.bckp'] = '&lt;blankxml/>'</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:workday-out-soap id="get_workday_data_call" routes-response-to="call_store_msg_return_msg_get_lkp_rsp" application="@{props['web.service.lookup.application']}" version="@{props['web.service.version']}"/>
        <cc:local-out id="call_store_msg_return_msg_get_lkp" execute-when="props['web.service.request.log'] == true" routes-response-to="get_workday_data_call" endpoint="vm://standard_logging/store_msg_return_msg">
            <cc:set name="store.filename" value="props['running.process'].toLowerCase().replace(' ','_')+props['lookup.type']+'_lookup_data_webservice_get_request.xml'"/>
        </cc:local-out>
        <cc:async-mediation id="xslt_get_web_service_xml_lkp" routes-to="call_create_wd_web_service_call" handle-downstream-errors="true">
            <cc:steps>
                <cc:copy id="bckp_msg" output="variable" output-variable="msg.bckp"/>
                <cc:eval id="set-props-lkp">
                    <cc:expression>props['lookup.type']= (props['lookup.type']=='')? '':'_'+props['lookup.type'].toLowerCase().replace(' ','_')</cc:expression>
                    <cc:expression>props['error.retrieving.data']='false'</cc:expression>
                </cc:eval>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="set-error-rsp"/>
        </cc:async-mediation>
        <cc:local-in id="get_workday_lookup_data" routes-to="xslt_get_web_service_xml_lkp" access="public">
            <cc:parameter name="web.service.lookup.filename" required="true"/>
            <cc:parameter name="web.service.lookup.application" required="true"/>
            <cc:parameter default="''" name="web.service.lookup.request.type" required="false"/>
            <cc:parameter default="'standard_wd_ws_call/create_wd_web_service_call'" name="web.service.lookup.ws.create.endpoint" required="false"/><cc:parameter default="''" name="lookup.type" required="false"/>
        <cc:out-parameter name="error.retrieving.data"/></cc:local-in>
        <cc:local-out id="call_determine_endpoint" endpoint="vm://standard_get_data_process/determine_endpoint"/>
        <cc:workday-out-rest id="make_workday_raas_call" routes-response-to="call_determine_endpoint" extra-path="@{props['report.extra.path']}"/>
        <cc:local-out id="put_raas_call_msg" execute-when="props['web.service.request.log'] == true" routes-response-to="make_workday_raas_call" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Executing RaaS with Endpoint: ' + props['report.extra.path']"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
        </cc:local-out>
        <cc:local-in id="get_raas_web_service_call" routes-to="put_raas_call_msg" access="public" icon="local-in-get_raas_web_service_call.png">
            <cc:parameter name="report.extra.path"/>
            <cc:parameter name="web.service.get.response.endpoint"/>
            <cc:parameter name="web.service.request.log"/>
            <cc:parameter name="web.service.get.application"/>
            <cc:parameter name="web.service.version"/>
            <cc:parameter default="'false'" name="web.service.get.conform.xml" required="true"/>
            <cc:parameter default="'lib/indent_xml.xsl'" name="web.service.get.conform.xml.filename" required="true"/>
            <cc:parameter name="web.service.get.conform.xml.endpoint" required="false"/>
        </cc:local-in>
        <cc:local-out id="get_paging_results_from_get" endpoint="vm://wcc/PagedGet">
            <cc:set name="is.paged.get.request.current.page.xpath" value="'/env:Envelope/env:Body/*/wd:Response_Filter/wd:Page'"/>
            <cc:set name="is.paged.get.response.current.page.xpath" value="'/env:Envelope/env:Body/*/wd:Response_Results/wd:Page'"/>
            <cc:set name="is.paged.get.response.total.pages.xpath" value="'/env:Envelope/env:Body/*/wd:Response_Results/wd:Total_Pages'"/>
            <cc:set name="is.paged.get.response.total.results.xpath" value="'/env:Envelope/env:Body/*/wd:Response_Results/wd:Total_Results'"/>
            <cc:set name="is.paged.get.application" value="props['web.service.get.application']"/>
            <cc:set name="is.paged.get.version" value="props['web.service.version']"/>
            <cc:set name="is.paged.get.page.zero" value="false"/>
            <cc:set name="is.paged.get.store.requests" value="true"/>
            <cc:set name="is.paged.get.process.endpoint" value="'vm://standard_get_data_process/determine_endpoint'"/>
        </cc:local-out>
        <cc:local-out id="call_store_msg_return_msg_get" execute-when="props['web.service.request.log'] == true" routes-response-to="get_paging_results_from_get" endpoint="vm://standard_logging/store_msg_return_msg">
            <cc:set name="store.filename" value="props['running.process'].toLowerCase().replace(' ','_') + '_webservice_get_request.xml'"/>
        </cc:local-out>
        <cc:local-out id="call_create_wd_get_call" routes-response-to="call_store_msg_return_msg_get" endpoint="vm://@{props['web.service.get.create.ws.xml.endpoint']}">
            <cc:set name="web.service.create.ws.xml.filename" value="props['web.service.get.create.ws.xml.filename']"/>
        </cc:local-out>
        <cc:local-in id="get_workday_paged_web_service_call" routes-to="call_create_wd_get_call" access="public" icon="local-in-get_workday_paged_web_service_call.png">
            <cc:parameter name="web.service.get.response.endpoint"/>
            <cc:parameter name="web.service.request.log"/>
            <cc:parameter name="web.service.get.application"/>
            <cc:parameter name="web.service.version"/>
            <cc:parameter default="'lib/indent_xml.xsl'" name="web.service.get.conform.xml.filename" required="true"/>
            <cc:parameter default="'false'" name="web.service.get.conform.xml" required="true"/>
            <cc:parameter name="web.service.get.create.ws.xml.filename"/>
            <cc:parameter name="web.service.get.create.ws.xml.endpoint"/>
            <cc:parameter default="'false'" name="web.service.get.lookup.wd.data" required="true"/>
            <cc:parameter name="web.service.get.lookup.wd.data.application"/>
            <cc:parameter name="web.service.get.lookup.wd.data.request.type"/>
            <cc:parameter name="web.service.get.lookup.wd.data.filename"/>
            <cc:parameter name="web.service.get.lookup.wd.data.subroutine"/>
        </cc:local-in>
        <cc:local-out id="call_store_msg_return_msg_get_lkp_rsp" execute-when="props['web.service.response.log'] == true" routes-response-to="copy_to_variable" endpoint="vm://standard_logging/store_msg_return_msg">
            <cc:set name="store.filename" value="props['running.process'].toLowerCase().replace(' ','_')+'_lookup_data_webservice_get_response.xml'"/>
        </cc:local-out>
        <cc:async-mediation id="xslt_get_web_service_xml">
            <cc:steps>
                <cc:xslt id="create_ws_request" url="@{props['web.service.create.ws.xml.filename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="create_standard_wd_web_service_call" routes-to="xslt_get_web_service_xml" access="public" icon="local-in-create_wd_web_service_call.png">
            <cc:parameter name="web.service.create.ws.xml.filename"/>
        </cc:local-in>
        <cc:local-out id="call_get_lookup_data_get" execute-when="props['web.service.get.lookup.wd.data'] == 'true'" routes-response-to="call_conform_get_data" endpoint="vm://@{props['web.service.get.lookup.wd.data.subroutine']}">
            <cc:set name="web.service.lookup.filename" value="props['web.service.get.lookup.wd.data.filename']"/>
            <cc:set name="web.service.lookup.application" value="props['web.service.get.lookup.wd.data.application']"/>
            <cc:set name="web.service.lookup.request.type" value="props['web.service.get.lookup.wd.data.request.type']"/>
        <cc:set name="web.service.lookup.ws.create.endpoint" value="(props['web.service.get.lookup.wd.data.create.call.endpoint']=='')?'standard_wd_ws_call/create_wd_web_service_call':props['web.service.get.lookup.wd.data.create.call.endpoint']"/></cc:local-out>
        <cc:async-mediation id="copy_to_variable_raas">
            <cc:steps>
                <cc:copy id="cp_to_lkp_var" output="variable" output-variable="lookup.wd.data.xml"/>
                <cc:copy id="reset_msg" input="variable" input-variable="msg.bckp"/>
                <cc:eval id="clr-msg-bckp">
                    <cc:expression>vars['msg.bckp'] = '&lt;blankxml/>'</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="call_store_msg_return_msg_get_lkp_rsp_raas" execute-when="props['web.service.response.log'] == true" routes-response-to="copy_to_variable_raas" endpoint="vm://standard_logging/store_msg_return_msg">
            <cc:set name="store.filename" value="props['running.process'].toLowerCase().replace(' ','_')+'_lookup_data_webservice_get_response.xml'"/>
        </cc:local-out>
        <cc:async-mediation id="bckp_msg" routes-to="put_raas_call_msg_lkp" handle-downstream-errors="true">
            <cc:steps>
                <cc:copy id="bckp_msg" output="variable" output-variable="msg.bckp"/>
                <cc:eval id="set-props-lkp">
                    <cc:expression>props['lookup.type']= (props['lookup.type']=='')? '':'_'+props['lookup.type'].toLowerCase().replace(' ','_')</cc:expression>
                    <cc:expression>props['error.retrieving.data']='false'</cc:expression>
                </cc:eval>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="set-error-rsp-raas"/>
        </cc:async-mediation>
        <cc:local-in id="get_workday_lookup_data_raas" routes-to="bckp_msg" access="public">
            <cc:parameter name="report.extra.path" required="true"/><cc:parameter default="''" name="lookup.type" required="false"/>
        <cc:out-parameter name="error.retrieving.data"/></cc:local-in>
        <cc:local-out id="put_raas_call_msg_lkp" execute-when="props['web.service.request.log'] == true" routes-response-to="make_workday_raas_call_lkp" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Executing RaaS with Endpoint: ' + props['report.extra.path']"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
        </cc:local-out>
        <cc:workday-out-rest id="make_workday_raas_call_lkp" routes-response-to="call_store_msg_return_msg_get_lkp_rsp_raas" extra-path="@{props['report.extra.path']}"/>
        <cc:local-out id="call_create_wd_web_service_call" routes-response-to="call_store_msg_return_msg_get_lkp" endpoint="vm://@{props['web.service.lookup.ws.create.endpoint']}">
            <cc:set name="web.service.create.ws.xml.filename" value="props['web.service.lookup.filename']"/>
        </cc:local-out>
        <cc:async-mediation id="set-error-rsp" routes-to="copy_to_variable">
            <cc:steps>
                <cc:eval id="set-error">
                    <cc:expression>props['error.retrieving.data']='true'</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="set-error-rsp-raas" routes-to="copy_to_variable_raas">
            <cc:steps>
                <cc:eval id="set-error">
                    <cc:expression>props['error.retrieving.data']='true'</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
    </cc:assembly>

</beans>