<?xml version="1.0" encoding="UTF-8"?>
<beans
     xmlns="http://www.springframework.org/schema/beans"
     xmlns:beans="http://www.springframework.org/schema/beans"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:cc="http://www.capeclear.com/assembly/10"
     xmlns:cloud="urn:com.workday/esb/cloud/10.0"
     xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:pi="urn:com.workday/picof"
     xmlns:wd="urn:com.workday/bsvc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <cc:assembly id="WorkdayAssembly" version="2020.36">
        <cc:async-mediation id="return-msg">
            <cc:steps>
                <cc:copy id="cp-back-to-msg" input="variable" input-variable="input.msg"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="store-file" routes-to="return-msg">
            <cc:steps>
                <cc:copy id="cp-msg" output="variable" output-variable="input.msg"/>
                <cc:write id="write-blankxml">
                    <cc:message>
                        <cc:text>&lt;blankxml/></cc:text>
                    </cc:message>
                </cc:write>
                <cc:store id="store-file" output="variable" output-variable="upload.data" input="variable" input-variable="input.msg" title="@{props['store.filename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="store_msg_return_msg" routes-to="store-file" access="public" icon="local-in-store_msg_return_msg.png" tooltip="Sub Routine Used to Log and Store current Message to Workday and reset to existing (input) message.">
            <cc:parameter default="'Logging_Output.txt'" name="store.filename" required="true"/>
        </cc:local-in>
        <cc:local-out id="send_file_to_wd" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Output File Stored'"/>
            <cc:set name="is.document.variable.name" value="'upload.report'"/>
            <cc:set name="is.document.deliverable" value="props['document.deliver']"/>
            <cc:set name="is.document.delivery.services" value="props['document.delivery.services']"/>
        </cc:local-out>
        <cc:async-mediation id="store-file-output" routes-to="send_file_to_wd">
            <cc:steps>
                <cc:store id="store-file" output="variable" output-variable="upload.report" input="variable" input-variable="output.data" createDocumentReference="true" title="@{props['output.filename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="store_msg_for_output_file" routes-to="store-file-output" access="public" icon="local-in-store_msg_for_output_file.png" tooltip="Sub Routine Used to Store 'output.data' variable to Workday and assign the correct delivery tags/services." use-global-error-handlers="false">
            <cc:parameter default="'noOutputFilenameProvided.xml'" name="output.filename" required="true"/>
            <cc:parameter default="'false'" name="document.deliver" required="false"/>
            <cc:parameter default="''" name="document.delivery.services" required="false"/>
        </cc:local-in>
        <cc:local-out id="call_zip_and_store_output" endpoint="vm://standard_logging/zip_and_store_output">
            <cc:set name="detail.filename" value="props['storefilename']"/>
            <cc:set name="detail.message"/>
            <cc:set name="summary.filename" value="props['summarylogfilename']"/>
            <cc:set name="summary.message" value="'Log File Attached'"/>
            <cc:set name="file.deliver" value="'false'"/>
            <cc:set name="file.delivery.service" value="''"/>
            <cc:set name="file.number.total" value="props['filesplit.totalcount'] "/>
            <cc:set name="file.number.current" value="props['filesplit.current']"/>
        </cc:local-out>
        <cc:async-mediation id="copyxmltagtomessage" routes-to="call_zip_and_store_output" execute-steps-when="props['xmltagtocopy'].length() != 0">
            <cc:steps>
                <cc:xslt id="extractsummarydata" url="lib/transformations/extractsummaryrecord.xsl"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="setfilename" routes-to="copyxmltagtomessage">
            <cc:steps>
                <cc:eval id="extractfilename">
                    <cc:expression>props['storefilename'] = parts[0].xpath(&quot;//tl:summary_log_information/@tl:filename&quot;, &quot;tl https://github.com/firehawk-consulting/firehawk/schemas/transaction_log.xsd&quot;)</cc:expression>
                    <cc:expression>props['filesplit.current'] = props['filesplit.current'] + 1</cc:expression>
                </cc:eval>
                <cc:write id="addxmltypeheaderdata">
                    <cc:message>
                        <cc:text>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?></cc:text>
                        <cc:message-content/>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:splitter id="spli-single-log-file" no-split-message-error="false">
            <cc:sub-route name="zip-files" routes-to="setfilename"/>
            <cc:xml-stream-splitter namespaces="tl https://github.com/firehawk-consulting/firehawk/schemas/transaction_log.xsd" xpath="//@{props['xmlsplit_tag']}"/>
        </cc:splitter>
        <cc:async-mediation id="copytranstomsg" routes-to="spli-single-log-file">
            <cc:steps>
                <cc:xslt id="findfilecount" input="variable" input-variable="xmltosplit" url="lib/transformations/extractsplitcount.xsl"/>
                <cc:eval id="setfullfilecount">
                    <cc:expression>props['filesplit.totalcount'] = parts[0].xpath(&quot;//nodecount&quot;)</cc:expression>
                    <cc:expression>props['filesplit.current'] = 0</cc:expression>
                </cc:eval>
                <cc:copy id="cp-output-msg" output="message" input="variable" input-variable="xmltosplit"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="split_var_processing" routes-to="copytranstomsg" access="private">
            <cc:parameter name="xmlsplit_tag" required="true" type="string"/>
            <cc:parameter name="summarylogfilename" type="string"/>
            <cc:parameter default="''" name="xmltagtocopy" type="string"/>
        </cc:local-in>
        <cc:local-out id="call_split_var_processing_summary" endpoint="vm://standard_logging/split_var_processing">
            <cc:set name="xmlsplit_tag" value="'tl:summary_log_information'"/>
            <cc:set name="summarylogfilename" value="props['running.process'] + '_summarylogs_' + vars['datetime'].text + '.zip'"/>
            <cc:set name="xmltagtocopy" value="'summarylogdetails'"/>
        </cc:local-out>
        <cc:async-mediation id="store_summary_log" routes-to="call_split_var_processing_summary">
            <cc:steps>
                <cc:copy id="cp_to_xmltosplit" output="variable" output-variable="xmltosplit" input="variable" input-variable="processingsummary.log"/>
                <cc:eval id="set-datetime">
                    <cc:expression>vars['datetime']=new java.text.SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;).format(new java.util.Date(System.currentTimeMillis()))</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="call_split_var_processing_failure" endpoint="vm://standard_logging/split_var_processing">
            <cc:set name="xmlsplit_tag" value="props['failurexmlsplit']"/>
            <cc:set name="summarylogfilename" value="props['running.process'] + '_failedrecords_' + vars['datetime'].text + '.zip'"/>
            <cc:set name="xmltagtocopy" value="''"/>
        </cc:local-out>
        <cc:async-mediation id="parseandstorefailures" routes-to="call_split_var_processing_failure">
            <cc:steps>
                <cc:xslt id="indent_variable" output="variable" output-variable="xmltosplit" input="variable" input-variable="tempfailedoutput.xml" url="lib/transformations/remove_sensitive_error_data.xsl"/>
                <cc:eval id="set-datetime">
                    <cc:expression>vars['datetime']=new java.text.SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;).format(new java.util.Date(System.currentTimeMillis()))</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="parse_and_store_logging_info" routes-to="call_parse_failures" access="public" icon="local-in-subroutineparseandstorelogs.png">
            <cc:parameter name="failurexmlsplit" required="true" type="string"/>
            <cc:parameter default="'summaryloginfo'" name="logfilexmlsplit" required="true" type="string"/>
            <cc:parameter name="process.type"/>
            <cc:parameter default="0" documentation="Count of Failed records. Used to confirm if a failed transaction file needs to be created" name="record.counter.failed" required="false"/>
            <cc:parameter default="true" name="log.summarydata" required="false"/>
        </cc:local-in>
        <cc:local-out id="call_log_err" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'ERROR'"/>
            <cc:set name="is.message.summary" value="'Error converting Text to XML for file: ' + props['sftp.filename']"/>
            <cc:set name="is.message.detail" value="context.errorMessage +' '+ context.errorComponentId"/>
        </cc:local-out>
        <cc:async-mediation id="set-props-and-var" routes-to="call_log_err">
            <cc:steps>
                <cc:eval id="set-procs">
                    <cc:expression>props['transaction.id'] = ''</cc:expression>
                    <cc:expression>props['workday.transaction.id']=''</cc:expression>
                    <cc:expression>props['additional.information']=props['sftp.filename'] + ' failed to convert to xml. Please review and resubmit.'</cc:expression>
                    <cc:expression>props['transaction.status'] = 'failed'</cc:expression>
                    <cc:expression>props['total-record-count'] = 1</cc:expression>
                </cc:eval>
                <cc:write id="write_var" output="variable" output-variable="sourcelinedata.xml">
                    <cc:message>
                        <cc:text>&lt;source_data>File Failed to Convert to XML&lt;/source_data></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="log_file_conversion_err" routes-to="set-props-and-var" access="public"/>
        <cc:local-out id="send_err_msg" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.message.severity" value="props['severity']"/>
            <cc:set name="is.message.summary" value="props['validation.message'] + ((props['validation.message'] == '')? '' : &quot;\n&quot;) + 'Error loading record: ' + props['record.counter'] + '. See Details for Error Reason.'"/>
            <cc:set name="is.message.detail" value="'Error Reason:  ' + props['error.message.detail'] + &quot;\n&quot; + &quot;\n&quot; + props['error.message.detail.expanded']"/>
        <cc:set name="is.message.detail.richtext" value="props['message.rich.text']"/></cc:local-out>
        <cc:async-mediation id="incr_error_cnt" routes-to="send_err_msg">
            <cc:steps>
                <cc:eval id="add-error-count">
                    <cc:expression>props['record.counter.failed']=((props['record.counter.failed'] == null)? 0:props['record.counter.failed'])+1</cc:expression>
                    <cc:expression>props['file.record.counter.failed'] = ((props['file.record.counter.failed'] == null)? 0:props['file.record.counter.failed']) + 1</cc:expression>
                    <cc:expression>props['error.message.detail']=(props['failed-on-import'] == true) ? context.errorMessage:props['error.message.detail']</cc:expression>
                    <cc:expression>props['error.reason']=(props['failed-on-import'] == true) ? 'Submit Web Service Call Failed':props['error.reason']</cc:expression>
                    <cc:expression>props['transaction.status']=(props['failed-on-import'] == true) ? 'failed':props['transaction.status']</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="process_Err_Msg" routes-to="incr_error_cnt" access="public">
            <cc:parameter name="failed-on-import" type="boolean"/>
            <cc:parameter default="false" name="include-file" type="boolean"/>
            <cc:parameter default="''" name="error.message.detail.expanded" required="false" type="string"/>
            <cc:parameter default="'WARNING'" name="severity" required="false"/>
            <cc:parameter default="''" name="error.message.detail"/><cc:parameter default="''" name="validation.message" required="false" type="string"/><cc:parameter default="true" name="message.rich.text" required="true" type="boolean"/>
        </cc:local-in>
        <cc:async-mediation id="incr_skip_cnt" continue-after-error="rewind" handle-downstream-errors="false">
            <cc:steps>
                <cc:eval id="incr_skip">
                    <cc:expression>props['file.record.counter.skipped'] = ((props['file.record.counter.skipped'] == null)? 0:props['file.record.counter.skipped']) + 1</cc:expression>
                    <cc:expression>props['record.counter.skipped'] = ((props['record.counter.skipped'] == null)? 0:props['record.counter.skipped']) + 1</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="increment_skipped_count" routes-to="incr_skip_cnt" access="public" icon="local-in-increment_skipped_count.png"/>
        <cc:async-mediation id="write_transaction_log">
            <cc:steps>
                <cc:write id="write_blank" output="message" output-mimetype="text/xml">
                    <cc:message>
                        <cc:text>&lt;blank/></cc:text>
                    </cc:message>
                </cc:write>
                <cc:xslt id="create_transaction_record" output="variable" output-variable="processingdetails.xml" url="lib/transformations/create_summary_record.xsl"/>
                <cc:eval id="clear-vars">
                    <cc:expression>props['source.transaction.id'] = ''</cc:expression>
                    <cc:expression>props['workday.transaction.id'] = ''</cc:expression>
                    <cc:expression>props['record.status'] = ''</cc:expression>
                    <cc:expression>props['additional.information'] = ''</cc:expression>
                    <cc:expression>props['error.reason'] = ''</cc:expression>
                    <cc:expression>props['error.message.detail'] = ''</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="create_transaction_log_record" routes-to="write_transaction_log" access="public">
            <cc:parameter default="'nosplit'" name="transaction.grouping" required="false" type="string"/>
            <cc:parameter name="record.counter"/>
            <cc:parameter name="file.number"/>
            <cc:parameter name="file.record.counter"/>
            <cc:parameter default="'no filename provided'" name="file.name" required="false" type="string"/>
            <cc:parameter name="source.transaction.id"/>
            <cc:parameter name="workday.transaction.id"/>
            <cc:parameter name="record.status"/>
            <cc:parameter name="additional.information" required="false"/>
            <cc:parameter default="0" name="transaction.amount" required="false"/>
            <cc:parameter name="error.reason" required="false"/>
            <cc:parameter name="error.message.detail" required="false"/><cc:parameter default="'unknown web service call'" name="web.service.call.name" required="true"/>
        </cc:local-in>
        <cc:local-out id="send_to_wd_zip" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="props['summary.message'] "/>
            <cc:set name="is.message.detail" value="props['detail.message']"/>
            <cc:set name="is.document.variable.name" value="'output.report'"/>
            <cc:set name="is.document.deliverable" value="props['file.deliver']"/>
            <cc:set name="is.document.delivery.services" value="props['file.delivery.services']"/>
        </cc:local-out>
        <cc:async-mediation id="save-consol-output" routes-to="send_to_wd_zip">
            <cc:steps>
                <cc:store id="store_consol_file" output="variable" output-variable="output.report" input="variable" input-variable="consoltransactions.file" createDocumentReference="false" immutable="true" title="@{props['summary.filename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="store_consol_file" routes-to="save-consol-output" access="private">
            <cc:parameter name="summary.filename" required="true" type="string"/>
            <cc:parameter default="'Log File Attached'" name="summary.message" required="false" type="string"/>
            <cc:parameter name="detail.message" required="false" type="string"/>
            <cc:parameter default="'false'" name="file.deliver" required="false"/>
            <cc:parameter default="''" name="file.delivery.services" required="false"/>
        </cc:local-in>
        <cc:local-out id="call_store_consol_file" endpoint="vm://standard_logging/store_consol_file">
            <cc:set name="summary.filename" value="props['summary.filename']"/>
            <cc:set name="summary.message" value="props['summary.message']"/>
            <cc:set name="detail.message" value="props['detail.message']"/>
            <cc:set name="file.deliver" value="props['file.deliver']"/>
            <cc:set name="file.delivery.services" value="props['file.delivery.services']"/>
        </cc:local-out>
        <cc:aggregator id="zip-for-transfer" routes-to="call_store_consol_file" force-batch-on-last-message="false" force-batch-when="props['file.number.total'] == props['file.number.current']">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:zip-file-collater output="variable" output-variable="consoltransactions.file" format="zip" message-entity-name="@{props['detail.filename']}"/>
        </cc:aggregator>
        <cc:local-in id="zip_and_store_output" routes-to="zip-for-transfer" access="private">
            <cc:parameter name="detail.filename" required="true" type="string"/>
            <cc:parameter name="detail.message" required="false" type="string"/>
            <cc:parameter name="summary.filename" required="true"/>
            <cc:parameter default="'Log File Attached'" name="summary.message" type="string"/>
            <cc:parameter default="'false'" name="file.deliver" required="false"/>
            <cc:parameter default="''" name="file.delivery.service" required="false"/>
            <cc:parameter name="file.number.total"/>
            <cc:parameter name="file.number.current"/>
        </cc:local-in>
        <cc:local-out id="update_progress_bar" execute-when="props['percent-complete'] > 0 &amp;&amp; props['percent-complete'] &lt; 100 &amp;&amp; props['file-recordcount'] != props['record-totalcount']" routes-response-to="reset_msg" endpoint="vm://wcc/PutIntegrationEvent">
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.system.wid" value="lp.isSet() ? lp.getIntegrationSystemRefWID() : null"/>
            <cc:set name="is.response.msg" value="props['record-filecount'] + ' records processed of ' + props['record-totalcount'] + ' for file: ' + props['currentfile-name']"/>
            <cc:set name="is.percent.complete" value="props['percent-complete']"/>
        </cc:local-out>
        <cc:async-mediation id="setpercentcomplete" routes-to="update_progress_bar">
            <cc:steps>
                <cc:eval id="setpercentcomplete">
                    <cc:expression>props['percent-complete']=new java.math.BigDecimal((props['record-filecount']/((props['record-totalcount'] == 0) || (props['record-totalcount'] == -1)) ? ((props['record-filecount']*2) : props['record-totalcount']))*100)</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:aggregator id="AggregatorRenderRecords" routes-to="setpercentcomplete" force-batch-on-last-message="true" force-batch-when="(props['record-totalcount'] == props['record-filecount'] || (props['record-totalcount'] == -1 &amp;&amp; util.isLastMessageInBatch()))">
            <cc:size-batch-strategy batch-size="25"/>
            <cc:xml-message-content-collater output="message">
        <cc:header-text>&lt;tempdata></cc:header-text>
        <cc:footer-text>&lt;/tempdata></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:async-mediation id="emptyvarforrender" routes-to="setpercentcomplete">
            <cc:steps>
                <cc:write id="writeblankmessage">
                    <cc:message>
                        <cc:text>&lt;blankxml/></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="start_progress_bar" execute-when="props['record-filecount'] == 1" routes-response-to="emptyvarforrender" endpoint="vm://wcc/PutIntegrationEvent">
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.system.wid" value="lp.isSet() ? lp.getIntegrationSystemRefWID() : null"/>
            <cc:set name="is.response.msg" value="props['record-filecount'] + ' records processed of ' + props['record-totalcount'] + ' for file: ' + props['currentfile-name']"/>
            <cc:set name="is.percent.complete" value="10"/>
        </cc:local-out>
        <cc:local-in id="render-processing-stats" routes-to="bckp_msg" access="public" icon="local-in-RenderProcessingStatistics.png" use-global-error-handlers="false">
            <cc:parameter default="'no filename passed'" name="currentfile-name" required="false"/>
            <cc:parameter default="-1" name="record-totalcount" required="false"/>
            <cc:parameter default="-99" name="record-filecount" required="false"/>
        </cc:local-in>
        <cc:aggregator id="agg-error-records" allow-external-control="false" force-batch-on-last-message="false" force-batch-when="props['file.number.total'] == props['file.number.current'] &amp;&amp; (props['record.count.total'] == props['record.counter'] || (props['record.count.total'] == -1 &amp;&amp; util.isLastMessageInBatch()))">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="variable" output-mimetype="text/xml" output-variable="fullerrorrecorddata">
        <cc:header-text>&lt;errorrecords></cc:header-text>
        <cc:footer-text>&lt;/errorrecords></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:async-mediation id="cp-error-var" routes-to="agg-error-records">
            <cc:steps>
                <cc:write id="blank_msg">
                    <cc:message>
                        <cc:text>&lt;blankxml/></cc:text>
                    </cc:message>
                </cc:write>
                <cc:copy id="cp-err-msg" input="variable" input-variable="error.record"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="aggregate_error_record_details" routes-to="cp-error-var" access="public">
            <cc:parameter default="-1" documentation="record.counter" name="record.count.total" required="false"/>
            <cc:parameter default="-99" name="record.counter" required="false"/>
            <cc:parameter default="-1" name="file.number.total" required="false"/>
            <cc:parameter default="-1" name="file.number.current" required="false"/>
            <cc:out-parameter name="aggregation-complete-flag"/>
        </cc:local-in>
        <cc:async-mediation id="save_processing_rpt">
            <cc:steps>
                <cc:xslt id="create_output_html" output="variable" output-mimetype="text/xml" output-variable="processingsummary.log" input="message" url="lib/transformations/create_processing_html_output.xsl"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:aggregator id="agg-process-record" routes-to="call_store_msg_return_msg_1" allow-external-control="false" force-batch-on-last-message="false" force-batch-when="(props['file.number.total'] == props['file.number.current'] &amp;&amp; (props['record.count.total'] == props['record.counter'] || (props['record.count.total'] == -1 &amp;&amp; util.isLastMessageInBatch() &amp;&amp; props['web.service.calls.total'] == props['web.service.calls.counter'])) &amp;&amp; props['continue.loop'] == 'no') || props['force-close'] == 'yes'">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="message" output-mimetype="text/plain">
        <cc:header-text>&lt;Process_Details></cc:header-text>
        <cc:footer-text>&lt;/Process_Details></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:async-mediation id="cp-input-param" routes-to="agg-process-record">
            <cc:steps>
                <cc:write id="blank_msg">
                    <cc:message>
                        <cc:text>&lt;blankxml/></cc:text>
                    </cc:message>
                </cc:write>
                <cc:copy id="cp-proc-sum" input="variable" input-variable="processingdetails.xml"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="aggregate_processing_details" routes-to="cp-input-param" access="public">
            <cc:parameter name="summarylog.filename" required="true"/>
            <cc:parameter default="'html'" name="summary.log.file.extension"/>
            <cc:parameter default="-1" name="record.count.total" required="false"/>
            <cc:parameter default="-99" name="record.counter" required="false"/>
            <cc:parameter default="-1" name="web.service.calls.counter" required="false"/>
            <cc:parameter default="-1" name="web.service.calls.total" required="false"/>
            <cc:parameter default="-1" name="file.number.total" required="false"/>
            <cc:parameter default="-1" name="file.number.current" required="false"/>
            <cc:parameter default="'no'" name="force-close" required="false" type="string"/>
            <cc:parameter default="'no'" name="continue.loop" required="true"/>
            <cc:out-parameter name="aggregation-complete-flag"/>
        </cc:local-in>
        <cc:async-mediation id="cp-msg_to_failed-var" execute-steps-when="props['file.record.counter.failed'] != 0">
            <cc:steps>
                <cc:copy id="cp-msg-for-upload" output="variable" output-variable="tempfailedoutput.xml" input="variable" input-variable="failedrecords" append-to-output-element="true"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:aggregator id="agg-failed-record" routes-to="cp-msg_to_failed-var" collate-when="props['record.status']=='failed'" force-batch-on-last-message="false" force-batch-when="(props['file.record.count.total'] == props['file.record.counter'] || (props['file.record.count.total'] == -1 &amp;&amp; util.isLastMessageInBatch())) || props['force-close'] == 'yes'">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:xml-message-content-collater output="variable" output-mimetype="text/xml" output-variable="failedrecords">
        <cc:header-text>&lt;@{props['failedtransaction.wrap']}@{props['failedtransaction.namespace']}>&lt;filename>@{props['file.failedrecords.name']}&lt;/filename></cc:header-text>
        <cc:footer-text>&lt;/@{props['failedtransaction.wrap']}></cc:footer-text>
      </cc:xml-message-content-collater>
        </cc:aggregator>
        <cc:async-mediation id="aggr_failed_info" routes-to="agg-failed-record">
            <cc:steps>
                <cc:write id="blank_msg">
                    <cc:message>
                        <cc:text>&lt;blankxml/></cc:text>
                    </cc:message>
                </cc:write>
                <cc:copy id="cp_source" output-mimetype="text/xml" input="variable" input-variable="sourcelinedata.xml"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-in id="aggregate_failed_transaction" routes-to="aggr_failed_info" access="public" use-global-error-handlers="false">
            <cc:parameter default="'imported'" documentation="Only Records with a failed value will be summarized." name="record.status" type="string"/>
            <cc:parameter name="process.type"/>
            <cc:parameter name="failedtransaction.wrap" required="true"/>
            <cc:parameter default="''" name="failedtransaction.namespace" required="false" type="string"/>
            <cc:parameter default="''" name="file.sourcefile.name" required="false" type="string"/>
            <cc:parameter default="0" name="file.number.current" required="false"/>
            <cc:parameter default="-1" name="file.record.count.total" required="false"/>
            <cc:parameter default="-99" name="file.record.counter" required="false"/>
            <cc:parameter default="0" name="file.record.counter.failed" required="true"/>
            <cc:parameter default="props['process.type']+'_failedtransaction_'+props['file.sourcefile.name']+'_file'+props['file.number.current']+'.xml'" name="file.failedrecords.name" required="true"/>
            <cc:parameter default="'no'" name="force-close" required="false" type="string"/>
        </cc:local-in>
        <cc:local-in id="parse_failures" routes-to="parseandstorefailures"/>
        <cc:local-in id="parse_summary" routes-to="store_summary_log"/>
        <cc:local-out id="call_parse_failures" execute-when="props['record.counter.failed'] != 0" routes-response-to="call_parse_summary" endpoint="vm://standard_logging/parse_failures"/>
        <cc:local-out id="call_parse_summary" execute-when="props['log.summarydata']==true &amp;&amp; vars['processingsummary.log'] != null" endpoint="vm://standard_logging/parse_summary"/>
        <cc:async-mediation id="bckp_msg" routes-to="start_progress_bar">
            <cc:steps>
                <cc:copy id="cp_msg_bckp" output="variable" output-variable="backup.var"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="reset_msg">
            <cc:steps>
                <cc:copy id="cp_bckp" input="variable" input-variable="backup.var"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="call_store_msg_return_msg_1" routes-response-to="save_processing_rpt" endpoint="vm://standard_logging/store_msg_return_msg"><cc:set name="store.filename" value="'Logging_Output.txt'"/></cc:local-out>
    </cc:assembly>

</beans>